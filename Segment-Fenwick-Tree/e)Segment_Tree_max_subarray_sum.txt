
vi arr;

vi merge(vi &a,vi &b,ll l,ll h){

// | prefix | suffix | max_sum | sum | 
   vi tempArr(4,0); 

// change the prefix && suffix 
tempArr[0]=max(a[0],a[3]+b[0]);
tempArr[1]=max(b[1],a[1]+b[3]);

// get sum
tempArr[3]=a[3]+b[3];  

// get max sum
tempArr[2]=max(max(a[2],b[2]),a[1]+b[0]);

return tempArr;
}

void build(vvi &ans,ll l,ll h,ll idx){
      if(l==h){ 
        // if(arr[l]<0)ans[idx]=vi(4,0);
        // else 
        ans[idx]=vi(4,arr[l]);  // trying first time
        return; }

     ll mid=l+(h-l)/2;
     build(ans,l,mid,2*idx+1);
     build(ans,mid+1,h,2*idx+2);
     ans[idx]=merge(ans[2*idx+1],ans[2*idx+2],l,h);
}

void update(vvi &ans,ll l,ll h,ll idx,ll i){
    if(i>h||i<l)return;
    if(l==h){
        ans[idx]=vi(4,arr[l]); 
        return ;}
         ll mid=l+(h-l)/2;
     update(ans,l,mid,2*idx+1,i);
     update(ans,mid+1,h,2*idx+2,i);
     ans[idx]=merge(ans[2*idx+1],ans[2*idx+2],l,h);
}



bool doTestcasesExist=0;
void solve(){


ll n,q;
cin>>n>>q;

arr.resize(n);
read_vec(arr);

ll sz=ceil(log2(n));
sz=2*pow(2,sz)-1;

vvi ans(sz,vi(4,0));

build(ans,0,n-1,0);

debug(ans);
 cout<<max((ll)0,(ll)ans[0][2])<<nline;
while(q--){
    ll a,val;
    cin>>a>>val;
    arr[a]=val;
    update(ans,0,n-1,0,a);
    // debug(arr);
    // debug(ans);
   cout<<max((ll)0,(ll)ans[0][2])<<nline;
}






   
}